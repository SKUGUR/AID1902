一、正则表达式
    1、文本的处理已经成为计算机常见工作之一
    2、对文本内容的搜索、定位、提取逻辑比较复杂
    3、快速方便解决上述问题

二、简介
    定义:文本的高级匹配模式，提供搜索，替换等功能，其本质是由一系列字符和特殊符号构成的字符串，这个字符串即正则表达式
    
    原理：通过特殊符号去描述字符的组成规则，比如重复、位置等，来表达一类字符串，进而匹配
    

三、元字符的使用
     re.findall("[A-Z]\w*","Hello world,China,你好,Douu")

    1、普通字符
       re.findall("ab","abdabefsdf")（也可以匹配汉字，甚至外文  匹配UTF-8字符）
  
    2、或
       元字符：|
       匹配规则：匹配|两侧任意正则表达式规则
       re.findall("ab|cd","abdabefscdf")
       Out[14]: ['ab', 'ab', 'cd']
      
       re.findall("ab|bc","abcfcdf")(注意此类匹配规则)
       Out[16]: ['ab']
  
    3、匹配单个字符
       元字符：.
       匹配规则：匹配除换行外任意一个字符
       re.findall("c.d","cad,cbd,ccd,cwd")
       Out[26]: ['cad', 'cbd', 'ccd', 'cwd']

    4、匹配字符集
       元字符：[字符集]
       匹配规则：匹配字符集中任意一个字符
       表达形式：[abc#!好] -->匹配其中任意一个字符
                 [0-9][a-z][A-Z]匹配区间中任意一个
                 [_#?0-9a-z]混合书写，区间写在后边
         
       re.findall("[aeiou]","hello world")
       Out[27]: ['e', 'o', 'o']

       re.findall("[0-9a-m]","hello world")
       Out[28]: ['h', 'e', 'l', 'l', 'l', 'd']

   
    5、匹配字符集取反
       元字符：[^字符集]
       匹配规则：匹配除了字符集以外的任意一个字符
       re.findall("[^0-9]","443543254,hello world")（逗号空格也被捕捉到）
       Out[31]: [',', 'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']
     
       re.findall("[^0-9]","44$^%*()34,hello wo")
       Out[33]: ['$', '^', '%', '*', '(', ')', ',', 'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o']


       re.findall(r"\(.+\)","(李-白),(杜-甫),(白 居 易)")
       Out[6]: ['(李-白),(杜-甫),(白 居 易)']

       re.findall(r"\(.+?\)","(李-白),(杜-甫),(白 居 易)")
       Out[7]: ['(李-白)', '(杜-甫)', '(白 居 易)']

    6、匹配字符串开始位置
       元字符：^
       匹配规则：匹配字符串的开始位置
       re.findall("^Hello","Hello world")
       Out[35]: ['Hello']

    7、匹配目标字符串的结尾位置
       元字符：$
       匹配原则：匹配目标字符串的结尾位置
       re.findall("world$","Hi Hello world")（单个字符或字符串都能匹配）
       Out[37]: ['world']
   
       使用技巧：^和$表示开头和结尾位置，这两个元字符一定是在正则表达式的开始和结尾处

    8、匹配字符重复
       元字符：*
       匹配原则：匹配前面的字符出现0次或多次
       re.findall("wo*","wooooo~~w!")
       Out[40]: ['wooooo', 'w']   o重复了多次和0次，o*是一个整体

       re.findall("[A-Z][a-z]*","Hello World")
       Out[41]: ['Hello', 'World'] 大写字母开头，后边小写字母重复0次或多次
   
       元字符：+
       匹配规则：匹配前面的字符出现一次或多次
       re.findall("wo+","wooooo~~w!")
       Out[42]: ['wooooo']

       re.findall("wo*~*","wooooo~~w!")
       Out[43]: ['wooooo~~', 'w']

       注意* 和+的差别   *可以代表空字符
       re.findall("[A-Z][a-z]*","I am")
       Out[44]: ['I']

       re.findall("[A-Z][a-z]+","I am")
       Out[45]: []
 
       re.findall("a*","abcdefg")
       Out[48]: ['a', '', '', '', '', '', '', '']

       元字符：?
       匹配规则：匹配前面的字符出现0次或者1次
       re.findall("-?[0-9][0-9]*","age:19,score:-60")
       Out[49]: ['19', '-60']

       re.findall("-?[0-9]+","age:19,score:-60,0098734")
       Out[50]: ['19', '-60', '0098734']
       
       re.findall("-?[1-9][0-9]*","age:19,score:-60,00087")
       Out[53]: ['19', '-60', '87']
  
       元字符：{n}
       匹配规则：匹配前面的字符出现n次
       re.findall("1[0-9]{10}","tel:18954923432")
       Out[54]: ['18954923432']

       re.findall("1[0-9]{10}","tel:18954923438776672")
       Out[55]: ['18954923438']

       元字符：{m,n}
       匹配规则：匹配前面的字符出现m~n次
       re.findall("[1-9][0-9]{5,10}","18954923438776672")
       Out[56]: ['18954923438', '776672']

       re.findall("[1-9][0-9]{5,10}","qq:18954923438776672")
       Out[57]: ['18954923438', '776672']

       re.findall("[1-9][0-9]{5,10}","qq:1892")
       Out[58]: []

       re.findall("[1-9][0-9]{5,10}","qq:18925")
       Out[59]: []

       re.findall("[1-9][0-9]{5,10}","qq:189275")
       Out[60]: ['189275']

       [0-9]{5,10}是一个整体，结果是6~11位数，小于六位返回空，大于11位自动切割

       
       
     9、匹配任意(非)数字字符
        元字符：\d   \D
        匹配规则：\d 匹配任意数字字符 [0-9]
                  \D 匹配任意非数字字符 [^0-9]
        (某些系统支持写法有限，只支持某些特殊的写法)
        re.findall("\d{1,5}","mysql:3306,mongo:27017")
        Out[64]: ['3306', '27017']
 
        re.findall("\D{1,5}","mysql:3306,mongo:27017")
        Out[65]: ['mysql', ':', ',mong', 'o:'] 

        re.findall("\D+","mysql:3306,mongo:27017")
        Out[66]: ['mysql:', ',mongo:']
  
     10、匹配任意(非)普通字符
        元字符：\w   \W
        匹配规则：\w 匹配普通字符
                  \W匹配非普通字符
        说明：普通字符指：数字、字母、下划线、汉字
        re.findall("\w+","addr=('127.0.0.1,8888')")
        Out[67]: ['addr', '127', '0', '0', '1', '8888']

        re.findall("\W+","addr=('127.0.0.1,8888')")
        Out[71]: ["=('", '.', '.', '.', ',', "')"]
 
     11、匹配任意(非)空字符
         元字符：\s  \S
         匹配原则：\s 匹配任意空字符
                   \S 匹配任意非空字符
         说明：空字符指  空格 \r  \n  \t  \f  \v
         
         re.findall("\w+ \w+","Hello World")
         Out[73]: ['Hello World']

         re.findall("\w+\s+\w+","Hello World")
         Out[74]: ['Hello World']
         
         re.findall("\S+","Hello    World")
         Out[75]: ['Hello', 'World']

     12、匹配字符串开头结尾位置
         元字符：\A   \Z
         匹配规则：\A -->^
                   \Z -->$
         
         两者同时出现，中间的字符串必须全部匹配才能得到结果
         re.findall("\A\w+\Z","Hello    World")
         Out[76]: []

         re.findall("\A\w+\Z","HelloWorld")
         Out[77]: ['HelloWorld']

     13、匹配单纯(非)边界位置
         元字符：\b   \B
         匹配规则：\b 匹配单词边界
                   \B 匹配非单词边界
         说明：单词边界指普通字符(\w代表的字符)与其他字符的交界位置

         re.findall(r"\bis\b","This is a test")
         Out[83]: ['is']

         re.findall(r"is","This is a test")
         Out[84]: ['is', 'is']

     
        
总结：
匹配字符：. [...] [^...]  \d  \D  \w  \W  \ss
匹配重复：*  +  ?  {n} {m,n}
匹配位置：^  $  \A  \Z  \b  \B 
其他：|  ()  \

四、正则表达式转义
   1、表示使用正则表达式匹配特殊字符，需要加\表示转义
      特殊字符：. * + ? ^ $ [] {} () | \
      
      匹配整数、负数、小数 
      re.findall("-?\d+\.?\d*","-1,3,6,3.4,-5.5")
      Out[105]: ['-1', '3', '6', '3.4', '-5.5']
  
      \\才是正确写法，\w、\s等在Python中没有匹配，所以这样写也能原样显示出来
       re.findall("\bis\b","This is a test")
       Out[110]: []

       re.findall("\\bis\\b","This is a test")
       Out[111]: ['is']

       re.findall(r"\bis\b","This is a test")
       Out[112]: ['is']

     2、raw字符串：在字符串前加r,表示改字符串为raw字符串，这样的字符串不会进行字符串转义处理       
       re.findall("\\\\0x\\d+","A is \\0x345")
       Out[115]: ['\\0x345']

       re.findall(r"\\0x\d+","A is \\0x345")
       Out[116]: ['\\0x345']


五、贪婪与非贪婪
    贪婪模式：默认情况下，匹配重复的元字符时尽可能多的向后匹配最多内容  比如：* + ? {m,n}
    非贪婪模式（懒惰）:让重复元字符尽可能少的匹配内容
    贪婪-->非贪婪
      *-->*?
      +-->+?
      ?-->??
     {m,n}-->{m,n}?


六、正则表达式分组
    1、定义：在正则表达式中，以()建立正则表达式内部分组，子组是正则表达式的一部分，可作为内部整体操作
    2、作用：作为内部整体，改变元字符的
       re.search(r"ab*","abababababababab").group()
       Out[12]: 'ab'

       re.search(r"(ab)*","abababababababab").group()
       Out[13]: 'abababababababab'
      
      re.search(r"(王|李)\w{1,3}","李云").group()
      Out[19]: '李云'

    3、捕获组
       给正则表达式子组 
        re.search(r"(?P<pig>王|李)\w{1,3}","王力").group()
        Out[23]: '王力'
     
    4、注意事项
       *一个正则表达式中可以有多个分组
       *子组可以嵌套
       *子组顺序一般由外到内，由左到右
       ((ab)c)d(ef)  
    

七、正则表达式匹配原则
   1、正确性：能够正确的匹配出目标字符串
   2、排他性：除了目标字符串外尽可能不匹配其他内容
   3、全面性：尽可能考虑到目标字符串所有情况，不遗漏
 

八、Python3 的 re模块
    
    regex = re.compile(pattern,flags = 0)
    功能：生成正则表达式对象
    参数：pattern 正则表达式
          flags 功能扩展标志位
    返回值：正则表达式对象
  
    list = re.findall(pattern,string,flags=0)
    list = regex.findall(string,pos,endpos)
    功能：通过正则匹配目标字符串
    参数：pattern 正则
          string 目标字符串
    返回值：匹配到的内容列表，如果正则中有子组，则列表中元素为子组对应内容
    list = re.split(pattern,string,flags=0)
    功能：通过正则匹配内容切割字符串
    参数：pattern 正则
          string 目标字符串
    返回值：返回切割后的内容列表
   
    s = re.sub(pattern,repl,)

   
    it = re.finditer(pattern,string,flags=0)
    功能：通过正则表达式匹配目标字符串
    返回值；返回匹配内容的迭代对象
   

   obj = re.fullmatch()

 

regex对象属性：
flags flags标志位值
pattern
groups
groupindex


2、属性方法
 start
 end
 span
 groupdict
 groups